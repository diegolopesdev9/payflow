TAREFA CRÍTICA: Modificar o Supabase Client para desabilitar COMPLETAMENTE o schema introspection e cache.

ARQUIVO: server/supabase.ts

PROBLEMA:
O Supabase Client tem um schema cache interno que está validando os nomes das colunas. Precisamos desabilitar isso completamente.

LOCALIZAR (linhas 1-14):

import { createClient } from '@supabase/supabase-js';
import { IStorage } from './storage';
import type { User, Category, Bill, NewUser, NewCategory, NewBill } from '../shared/schema';

const supabaseUrl = process.env.SUPABASE_URL || '';
const supabaseKey = process.env.SUPABASE_ANON_KEY || '';

const supabase = createClient<any>(supabaseUrl, supabaseKey, {
  db: { schema: 'public' },
  auth: { persistSession: false, autoRefreshToken: false },
  global: {
    headers: { 'x-application-name': 'payflow' }
  }
});

SUBSTITUIR POR:

import { createClient, SupabaseClient } from '@supabase/supabase-js';
import { IStorage } from './storage';
import type { User, Category, Bill, NewUser, NewCategory, NewBill } from '../shared/schema';

const supabaseUrl = process.env.SUPABASE_URL || '';
const supabaseKey = process.env.SUPABASE_ANON_KEY || '';

// Criar client sem types automáticos
const supabase: SupabaseClient<any> = createClient(supabaseUrl, supabaseKey, {
  db: { 
    schema: 'public'
  },
  auth: { 
    persistSession: false, 
    autoRefreshToken: false,
    detectSessionInUrl: false,
    flowType: 'implicit'
  },
  global: {
    headers: { 
      'x-application-name': 'payflow',
      'Prefer': 'return=representation'
    }
  },
  // CRÍTICO: Desabilitar schema introspection
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// Desabilitar schema cache via monkey patch
(supabase as any).rest.shouldThrowOnError = false;

E DEPOIS, MODIFICAR o método createBill (linha ~120):

LOCALIZAR:

async createBill(billData: any): Promise<any> {
  const { data, error } = await supabase
    .from('bills')
    .insert(billData)
    .select()
    .single();
  
  if (error) {
    console.error('Erro ao criar bill no Supabase:', error);
    throw error;
  }
  return data;
}

SUBSTITUIR POR:

async createBill(billData: any): Promise<any> {
  console.log('=== CRIANDO BILL ===');
  console.log('Dados recebidos:', JSON.stringify(billData, null, 2));
  
  // Usar insert sem validação de schema
  const { data, error } = await (supabase as any)
    .from('bills')
    .insert(billData, { 
      returning: 'representation',
      count: null 
    })
    .select()
    .single();
  
  console.log('Resposta Supabase:', { data, error });
  
  if (error) {
    console.error('Erro detalhado:', JSON.stringify(error, null, 2));
    throw error;
  }
  return data;
}

EXPLICAÇÃO:
- Desabilitamos o schema introspection
- Adicionamos header 'Prefer' para forçar retorno de dados
- Usamos cast para 'any' no from() para bypass total de validação
- Adicionamos logs detalhados para debug
