TAREFA CR√çTICA: Corrigir m√©todo createBill no arquivo server/supabase.ts para garantir convers√£o de campos para snake_case antes de enviar ao Supabase.

ARQUIVO: server/supabase.ts

PROBLEMA IDENTIFICADO:
O m√©todo createBill est√° recebendo dados em camelCase e enviando direto ao Supabase sem convers√£o, causando erro: "Could not find the 'dueDate' column of 'bills' in the schema cache"

LOCALIZAR o m√©todo createBill (aproximadamente linhas 110-150):

async createBill(billData: any): Promise<any> {
  console.log('=== CRIANDO BILL ===');
  console.log('Dados recebidos:', JSON.stringify(billData, null, 2));
  
  // Fazer insert RAW sem qualquer valida√ß√£o de types
  const response = await fetch(
    `${process.env.SUPABASE_URL}/rest/v1/bills`,
    {
      method: 'POST',
      headers: {
        'apikey': process.env.SUPABASE_ANON_KEY || '',
        'Authorization': `Bearer ${process.env.SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json',
        'Prefer': 'return=representation'
      },
      body: JSON.stringify(billData)
    }
  );
  
  if (!response.ok) {
    const error = await response.json();
    console.error('Erro Supabase:', error);
    throw new Error(JSON.stringify(error));
  }
  
  const data = await response.json();
  console.log('‚úÖ Bill criado:', data);
  
  // Retornar o primeiro item do array
  return Array.isArray(data) ? data[0] : data;
}

SUBSTITUIR POR:

async createBill(billData: any): Promise<any> {
  console.log('üìù [SupabaseStorage] createBill - dados recebidos:', billData);
  
  // GARANTIR convers√£o para snake_case (caso routes.ts n√£o tenha convertido)
  const billDataSnakeCase = {
    name: billData.name,
    amount: billData.amount,
    due_date: billData.due_date || billData.dueDate,  // Aceita ambos
    is_paid: billData.is_paid !== undefined ? billData.is_paid : (billData.isPaid ?? false),
    user_id: billData.user_id || billData.userId,
    category_id: billData.category_id || billData.categoryId || null,
    description: billData.description || null,
  };
  
  console.log('üîÑ [SupabaseStorage] Dados convertidos para snake_case:', billDataSnakeCase);
  
  const { data, error } = await supabase
    .from('bills')
    .insert([billDataSnakeCase])
    .select()
    .single();
  
  if (error) {
    console.error('‚ùå [SupabaseStorage] Erro ao criar bill:', error);
    throw error;
  }
  
  console.log('‚úÖ [SupabaseStorage] Bill criado com sucesso:', data);
  return data;
}