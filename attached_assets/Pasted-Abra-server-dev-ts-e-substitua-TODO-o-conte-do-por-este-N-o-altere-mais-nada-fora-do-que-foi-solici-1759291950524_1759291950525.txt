Abra server/dev.ts e substitua TODO o conteúdo por este. Não altere mais nada fora do que foi solicitado.”

// server/dev.ts — servidor único (API + SPA via Vite middleware)
import path from "node:path";
import fs from "node:fs";
import { fileURLToPath } from "node:url";
import express from "express";
import cors from "cors";
import { createServer as createViteServer } from "vite";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function start() {
  const app = express();

  // Middlewares comuns
  app.use(cors());
  app.use(express.json());

  // === [SUAS ROTAS DE API] ===============================================
  // Se você já tem um router/export das rotas, importe e use aqui.
  // Ex.: import router from "./router"; app.use("/api", router);
  // Enquanto isso, garantimos ao menos um /api/healthz para validação:
  app.get("/api/healthz", (_req, res) => {
    res.json({ ok: true, time: new Date().toISOString() });
    // ↑ deixe isso mesmo tendo suas rotas; ajuda na validação rápida
  });
  // =======================================================================

  // Vite em modo middleware: serve os assets / HMR para o SPA
  const vite = await createViteServer({
    root: path.resolve(__dirname, ".."),
    appType: "custom",             // não assumir index.html automaticamente
    server: { middlewareMode: true }
  });

  app.use(vite.middlewares);

  // Fallback de SPA: qualquer rota não-API devolve o index.html transformado
  app.use("*", async (req, res, next) => {
    try {
      const url = req.originalUrl;
      const indexHtmlPath = path.resolve(__dirname, "..", "index.html");
      let html = fs.readFileSync(indexHtmlPath, "utf-8");
      html = await vite.transformIndexHtml(url, html);
      res.status(200).set({ "Content-Type": "text/html" }).end(html);
    } catch (e) {
      next(e);
    }
  });

  const PORT = 5173; // uma única porta para API + SPA
  app.listen(PORT, () => {
    console.log(`✅ App (SPA + API) rodando em http://localhost:${PORT}`);
  });
}

start().catch((err) => {
  console.error(err);
  process.exit(1);
});