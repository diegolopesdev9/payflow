TAREFA ETAPA 2/3: Implementar cálculo real das porcentagens no Dashboard baseado em dados históricos.

ARQUIVO: src/pages/Dashboard.tsx

INSTRUÇÕES CRÍTICAS:
- MODIFICAR APENAS cálculos de porcentagens (não mexer em layout/visual)
- SUBSTITUIR porcentagens mockadas (+15%, -5%, +10%) por cálculos reais
- Se não houver dados do período anterior, esconder badges de porcentagem
- NÃO modifique outras partes do código
- Mostre o diff completo

MODIFICAÇÕES NECESSÁRIAS:

ADICIONAR estas funções auxiliares ANTES da linha "const pending = allBills.filter...":

// Calcula variação percentual entre dois valores
const calculatePercentageChange = (current: number, previous: number): number | null => {
  if (previous === 0) return null;
  return ((current - previous) / previous) * 100;
};

// Calcula total da semana passada (7-14 dias atrás)
const calculatePreviousWeekTotal = (bills: Bill[]): number => {
  const today = new Date();
  const sevenDaysAgo = new Date(today.getTime() - (7 * 24 * 60 * 60 * 1000));
  const fourteenDaysAgo = new Date(today.getTime() - (14 * 24 * 60 * 60 * 1000));
  
  return bills
    .filter(bill => {
      const dueDate = new Date(bill.due_date);
      return dueDate >= fourteenDaysAgo && dueDate < sevenDaysAgo && !bill.is_paid;
    })
    .reduce((sum, bill) => sum + (bill.amount / 100), 0);
};

// Calcula totais do mês anterior
const calculatePreviousMonthTotals = (bills: Bill[]): { pending: number; paid: number } => {
  const today = new Date();
  const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
  const lastMonthEnd = new Date(today.getFullYear(), today.getMonth(), 0);
  
  const lastMonthBills = bills.filter(bill => {
    const dueDate = new Date(bill.due_date);
    return dueDate >= lastMonth && dueDate <= lastMonthEnd;
  });
  
  const pending = lastMonthBills
    .filter(bill => !bill.is_paid)
    .reduce((sum, bill) => sum + (bill.amount / 100), 0);
  
  const paid = lastMonthBills
    .filter(bill => bill.is_paid)
    .reduce((sum, bill) => sum + (bill.amount / 100), 0);
  
  return { pending, paid };
};

ADICIONAR após as variáveis totalToPay e totalPaid:

// Calcular variações percentuais
const previousWeekTotal = calculatePreviousWeekTotal(allBills);
const weeklyChange = calculatePercentageChange(weeklyTotalCalculated, previousWeekTotal);

const previousMonthTotals = calculatePreviousMonthTotals(allBills);
const totalToPayChange = calculatePercentageChange(totalToPay, previousMonthTotals.pending);
const totalPaidChange = calculatePercentageChange(totalPaid, previousMonthTotals.paid);

LOCALIZAR e SUBSTITUIR a Badge na seção "Despesas Semanais":
ANTES:
<Badge variant="outline" className="bg-success/10 text-success border-success/20">
  +15% <TrendingUp className="w-3 h-3 ml-1" />
</Badge>

DEPOIS:
{weeklyChange !== null && (
  <Badge 
    variant="outline" 
    className={weeklyChange >= 0 
      ? "bg-destructive/10 text-destructive border-destructive/20" 
      : "bg-success/10 text-success border-success/20"
    }
  >
    {weeklyChange >= 0 ? '+' : ''}{weeklyChange.toFixed(1)}%
    {weeklyChange >= 0 
      ? <TrendingUp className="w-3 h-3 ml-1" /> 
      : <TrendingDown className="w-3 h-3 ml-1" />
    }
  </Badge>
)}

LOCALIZAR e SUBSTITUIR o badge de -5% em "Total a Pagar":
ANTES:
<div className="flex items-center gap-1 text-sm text-destructive">
  <TrendingDown className="w-3 h-3" />
  <span>-5%</span>
</div>

DEPOIS:
{totalToPayChange !== null && (
  <div className={`flex items-center gap-1 text-sm ${totalToPayChange >= 0 ? 'text-destructive' : 'text-success'}`}>
    {totalToPayChange >= 0 
      ? <TrendingUp className="w-3 h-3" /> 
      : <TrendingDown className="w-3 h-3" />
    }
    <span>{totalToPayChange >= 0 ? '+' : ''}{totalToPayChange.toFixed(1)}%</span>
  </div>
)}

LOCALIZAR e SUBSTITUIR o badge de +10% em "Total Pago":
ANTES:
<div className="flex items-center gap-1 text-sm text-success">
  <TrendingUp className="w-3 h-3" />
  <span>+10%</span>
</div>

DEPOIS:
{totalPaidChange !== null && (
  <div className={`flex items-center gap-1 text-sm ${totalPaidChange >= 0 ? 'text-success' : 'text-destructive'}`}>
    {totalPaidChange >= 0 
      ? <TrendingUp className="w-3 h-3" /> 
      : <TrendingDown className="w-3 h-3" />
    }
    <span>{totalPaidChange >= 0 ? '+' : ''}{totalPaidChange.toFixed(1)}%</span>
  </div>
)}

EXPLICAÇÃO:
- Calcula variação real comparando períodos (semana atual vs anterior, mês atual vs anterior)
- Verde (TrendingDown) = diminuiu gastos (bom para "a pagar")
- Vermelho (TrendingUp) = aumentou gastos (ruim para "a pagar")
- Verde (TrendingUp) = aumentou pagamentos (bom para "total pago")
- Se não houver dados do período anterior, esconde o badge (evita divisão por zero)
- Arredonda para 1 casa decimal (.toFixed(1))

NÃO MODIFIQUE MAIS NADA. Mostre o diff completo e aguarde confirmação.